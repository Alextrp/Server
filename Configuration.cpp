#include "Configuration.h"
#include <algorithm>

bool compareBySize(const Configurationn& a, const Configurationn& b) {
    return a.relative_positions.size() < b.relative_positions.size();
}

// ������� ��� �������� ���� ������������
std::vector<Configurationn> createConfigurations() {
    std::vector<Configurationn> configurations;

    // ��� 0 - ���� ������
    configurations.push_back({ 0, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7}}, 1024 });

    // ��� 1 - ��� ������
    configurations.push_back({ 1, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7},
                                  {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6}, {1,7}}, 1024 });

    // ��� 2 - ��� ������
    configurations.push_back({ 2, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7},
                                  {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6}, {1,7},
                                  {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {2,5}, {2,6}, {2,7}}, 1024 });

    // ��� 3 - ������ ������ ������
    configurations.push_back({ 3, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7},
                                  {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6}, {1,7},
                                  {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {2,5}, {2,6}, {2,7},
                                  {3,0}, {3,1}, {3,2}, {3,3}, {3,4}, {3,5}, {3,6}, {3,7}}, 1024 });

    // ��� 4 - ���� �������
    configurations.push_back({ 4, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0}, {7,0}}, 1024 });

    // ��� 5 - ��� �������
    configurations.push_back({ 5, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0}, {7,0},
                                  {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1}, {7,1}}, 1024 });

    // ��� 6 - ��� �������
    configurations.push_back({ 6, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0}, {7,0},
                                  {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1}, {7,1},
                                  {0,2}, {1,2}, {2,2}, {3,2}, {4,2}, {5,2}, {6,2}, {7,2}}, 1024 });

    // ��� 7 - ������ �������
    configurations.push_back({ 7, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0}, {7,0},
                                  {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1}, {7,1},
                                  {0,2}, {1,2}, {2,2}, {3,2}, {4,2}, {5,2}, {6,2}, {7,2},
                                  {0,3}, {1,3}, {2,3}, {3,3}, {4,3}, {5,3}, {6,3}, {7,3}}, 1024 });

    // ��� 8 - ���� ���������
    configurations.push_back({ 8, {{0,0}}, 1024 });

    // ��� 9 - ������������� 1x2
    configurations.push_back({ 9, {{0,0},{0,1}}, 1024 });

    // ��� 10 - ������������� 1x3
    configurations.push_back({ 10, {{0,0},{0,1},{0,2}}, 1024 });

    // ��� 11 - ������������� 2x3
    configurations.push_back({ 11, {{0,0},{0,1},{0,2},
                                   {1,0},{1,1},{1,2}}, 1024 });

    // ��� 12 - ������� 2x2
    configurations.push_back({ 12, {{0,0}, {0,1}, {1,0}, {1,1}}, 1024 });

    // ��� 13 - ������� 3x3
    configurations.push_back({ 13, {{0,0}, {0,1}, {0,2},
                                   {1,0}, {1,1}, {1,2},
                                   {2,0}, {2,1}, {2,2}}, 1024 });

    // ��� 14 - ������� 4x4
    configurations.push_back({ 14, {{0,0}, {0,1}, {0,2}, {0,3},
                                   {1,0}, {1,1}, {1,2}, {1,3},
                                   {2,0}, {2,1}, {2,2}, {2,3},
                                   {3,0}, {3,1}, {3,2}, {3,3}}, 1024 });

    // ��� 14 - ������� 8x8
    std::vector<std::pair<int, int>> square8x8;
    for (int i = 0; i < 8; ++i) {
        for (int j = 0; j < 8; ++j) {
            square8x8.push_back({ i, j });
        }
    }
    configurations.push_back({ 15, square8x8, 1024 });


    // ��� 0 - ���� ������ ��� ������
    configurations.push_back({ 16, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}}, 1024 });

    // ��� 1 - ��� ������ ��� ������
    configurations.push_back({ 17, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6},
                                      {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6}, }, 1024 });

    // ��� 2 - ��� ������ ��� ������
    configurations.push_back({ 18, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6},
                                      {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6},
                                      {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {2,5}, {2,6}, }, 1024 });

    // ��� 3 - ������ ������ ������ ��� ������
    configurations.push_back({ 19, {{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6},
                                      {1,0}, {1,1}, {1,2}, {1,3}, {1,4}, {1,5}, {1,6},
                                      {2,0}, {2,1}, {2,2}, {2,3}, {2,4}, {2,5}, {2,6},
                                      {3,0}, {3,1}, {3,2}, {3,3}, {3,4}, {3,5}, {3,6}, }, 1024 });

    // ��� 4 - ���� ������� ��� ������
    configurations.push_back({ 20, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0}}, 1024 });

    // ��� 5 - ��� ������� ��� ������
    configurations.push_back({ 21, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0},
                                   {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1}}, 1024 });

    // ��� 6 - ��� ������� ��� ������
    configurations.push_back({ 22, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0},
                                      {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1},
                                      {0,2}, {1,2}, {2,2}, {3,2}, {4,2}, {5,2}, {6,2}, }, 1024 });

    // ��� 7 - ������ ������� ��� ������
    configurations.push_back({ 23, {{0,0}, {1,0}, {2,0}, {3,0}, {4,0}, {5,0}, {6,0},
                                      {0,1}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1},
                                      {0,2}, {1,2}, {2,2}, {3,2}, {4,2}, {5,2}, {6,2},
                                      {0,3}, {1,3}, {2,3}, {3,3}, {4,3}, {5,3}, {6,3}, }, 1024 });

    // ��� 13 - ������� 3x3 ��� ������
    configurations.push_back({ 24, {{0,0}, {0,1},
                                   {1,0}, {1,1}, {1,2},
                                   {2,0}, {2,1}, {2,2}}, 1024 });

    // ��� 14 - ������� 4x4 ��� ������
    configurations.push_back({ 25, {{0,0}, {0,1}, {0,2},
                                   {1,0}, {1,1}, {1,2},
                                   {2,0}, {2,1}, {2,2}, {2,3},
                                   {3,0}, {3,1}, {3,2}, {3,3}}, 1024 });

    // ��� 14 - ������� 8x8 ��� ������
    std::vector<std::pair<int, int>> square7x7;
    for (int i = 0; i < 7; ++i) {
        for (int j = 0; j < 7; ++j) {
            square8x8.push_back({ i, j });
        }
    }
    configurations.push_back({ 26, square8x8, 1024 });

    return configurations;
}
